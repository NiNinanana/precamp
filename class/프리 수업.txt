notion에 있는 단축키 공부
영타 연습하기
ctrl + b = 옆에 것 지우기
select option - 종속태그
selected : 처음에 나오게 하는 것
disabled : 안눌리게
값이 참일 때는 true를 안 써도 된다
button 태그는 여러 태그를 추가할 수 있따.
ctrl + / = 주석
margin border padding contents
크기 중심을 내용이 아니라 바깥테두리로
flex[flexbox froggy : 연습] - 13단계까지 풀어보기
flex-direction : 방향 defalut값 row
justify-content : 위치
align-items : 역방향
BEM : __(언더바 두개)

notion의 study
싸이월드 ㅇ왼쪽부분

---

클라이언트 [프론트 엔드] 데이터 요청
서버 [백엔드] 결과값 전달

라이브러리/프레임워크(react.js/vue.js/angular.js)
이미 만들어 놓은 것을 가져다 쓰는 것

안드로이드-kotlin
ios-swift
-> 크로스플랫폼 개발 언어
react.native(js) / flutter(dart)

npm trends
여러 기술의 검색량/트렌드

stack overflow

API
식당에서 요리 재료라고 생각하면 됨

백엔드 언어는 많음
php java 등등 각각 라이브러리/프레임워크가 있음

프론트 엔드와 백엔드 사이를 통신할 도구가 필요함
프론트 엔드-통신-백 엔드-통신-데이터베이스 / 여기서 통신과 통신은 서로 도구가 다름

자바스크립트는 프론트와 백 모두 쓰임

---

변수와 상수 : 데이터를 담는 공간
만드는 방법 : var(이름 중복 가능 → 실무 사용 X) / let(중복 불가) / const(중복 불가)
let 변수이름 = 담을 내용 / const 상수이름 = 담을 내용
= : 오른쪽의 값을 왼쪽 상자에 넣는다

let은 변수 / const는 상수
let은 담는 내용을 변경 가능 / const는 변경 불가
let child = "철수"
let child = "영희"

실무에서는 const위주

let myMoney = 300 / 자바 스크립트에서 보통 / camelCase
let my_money = 300 / 파이썬에서 보통 / snake_case

13과 "13"은 다름
---

개발자 도구
elements : html, css
console : javascript

---

배열
0번부터 시작
[]안에 데이터를 담고 ,로 데이터 구분

const numbers = [2, 4, 6, 8]
2 : 0번째 / 6 : 2번째

array.length 길이
array.includes() 괄호안의 값이 있는지
array.push() 괄호안의 값을 맨 뒤에 추가
array.pop() 괄호와 상관없이 맨 뒤에 값을 제거
array.join() 괄호안의 값을 사이에 넣어 배열 값을 합침 / default값은 ,

const 배열
배열 자체를 바꿀 순 없지만 속은 바꿀 수 있다

문자열도 배열임

---

객체
{} 요소들의 성격이 다를 경우 객체에 저장
성격이 다른 데이터를 하나의 그룹을 묶는 것

const profile = {
    name: "철수",
    school: "다람쥐초등학교"
}

profile.name

배열에 객체를 담는다

숫자와 문자열을 join할 때는 숫자를 문자열로 바꿔줘야한다

---
html + html = iframe
html + css = link / <link href="" rel="stylesheet" />
html + js = script / <script src=""> </script>

홈 비디오 직접 다운 받아 넣기
자바스크립트 mdn

---

브라우저 - html,css,js를 읽고 해석
코드는 모든 브라우저에서 읽힐 수 있는가
다른 버전에서도 읽힐 수 있는가

---

string 문자
number 숫자
boolean 참/거짓
null 값이 없음
undefined 값을 정의하지 않음

=== 같은가 / !== 다른가
== 같은가 / != 다른가
3개 : 데이터 타입까지 / 2개 : 속 알멩이만
'1' === 1 : false / '1' == 1 : true

&& : and / || : or / ! : 부정

조건문 . 시작점과 끝점이 존재

조건 A 가 맞다면 A 실행 : 시작점
아니라면 B 실행 : 끝점

시작과 끝 사이에 몇개든 상관 없음
끝점은 생략 가능

if(조건A) {
    A 실행
} else {
    B 실행
}

비교연산자와 함께 쓰임

if(A !== B) {

} else if((C===D) && (E===F)) {

}

true면 A !== B가 true로 바뀜
false면 A !== B가 false로 바뀜

둘 다 true면 (C===D) && (E===F)가 true로 바뀜

---

반복문
for(let i = 0; i<5; i=i+1){
    반복하고 싶은 것
}
초기식 : let i = 0
조건식 : i<5
증감식 : i=i+1
0이 5가 될때까지 1씩 증가하면서 반복해라
초기식은 처음에만 실행

그만두기(break), 건너뛰기(continue) 가능

i=i+1 / i++ / ++i 다 같음

for(let i = 0; i<fruits.length; i++){
    console.log(fruits[i].number + " " + fruits[i].title)
}

---

수학객체
자바스크립트의 수학 기능을 사용하는 명령어

랜덤수,최대최소값,올림버림 등등
Math.~~~
random : 랜덤 / 0 ~ 0.99999999999... 중 하나
floor : 버림

String().padStart(6, "0") : 앞 부분을 원하는 걸로 채울 수 있음
6자리, 6자리가 아니라면 앞에서부터 0을 채워라

const aaa = String(Math.floor(Math.random() * 1000000)).padStart(6, "0")
6자리 랜덤 수를 뽑고 소수점 밑 버리고 문자열로 바꾸고 6자리가 될 때까지 0을 앞에 붙인다

function aaa(){

}

aaa 랑 () 는 짝꿍

Number 문자열 > 숫자열
String 숫자열 > 문자열

---

웹앱개발자
게임
AI, 머신러닝
VR AR
데이터 사이언티스트

웹앱 : 기획 pm uiux 프론트엔드 백엔드
프론트엔드 주니어 -> 시니어, pm, 서비스 기획자
풀스택 -> cto(개발자 총괄), pm, 서비스 기획자, 데이터 사이언티스트, AI 머신러닝

---

function number() {
    let token = String(Math.floor(Math.random() * 1000000)).padStart(6, "0")
    console.log(token)
}

function hello() : 선언식
const hello=function() : 표현식
const hello=()=> : 화살표함수

실행할 때는 hello()

---

시간지연함수 (ms : 밀리세컨드)
    setTimeout(기능, ms) : 초만큼 기다렸다가 기능 실행
시간반복함수
    setInterval(기능, ms) : 초마다 기능 실행

% : 나머지

div를 최대한 줄여보자
라인을 굳이 div로 만들지 말고
css 를 통해서 border-bottom등을 통해서 만들 수도 있으니까

---

실습 : 자게
개인 : 중고마켓
팀

0910 알고리즘
1013 리액트
1417 과제
1720 포폴
20 블로그 정리

매주 금요일 알고리즘 test
매주 g-rating 평가
매주 페어링 프렌즈
프로필촬영

취업
1. 직접지원
2. 파트너사(텔런트 엑스, 점핏)

---

Github : Git에 저장한 파일들이 실제 저장되는 장소 / 사이트
Git : Github에 저장해주는 프로그램. 명령어로 동작 / 컴퓨터

맥은 homebrew 를 먼저 설치

git bash 설치

내컴퓨터
git init : .git폴더가 만들어짐
git add : .git폴더안으로 저장(임시저장)
git commit : git폴더안 파일이 확정

온라인
git push : github에 올림

ctrl + ` : terminal

terminal : cli <-> gui

디렉토리 : 폴더
cd : change directory
ls : 폴더 내 파일
../ 상위 폴더 이동
pwd : print working directory(현 위치)
. 으로 시작하는 파일은 숨김파일
ls -al : 폴더 내 숨김파일 까지 전부

git remote add origin + 레파스토리 주소
git remote -v : 제대로 저장되었는지 확인

git config --global ~~~ : 최초 1회 실행
~~~ user.email ""
~~~ user.name ""
git config --list : 잘 저장되었는지 확인

git status : git add 할 준비가 된 애들
















